I"nF<h1 class="no_toc" id="adding-a-new-analyzer-module">Adding a new analyzer module</h1>

<p><em>Last update: 02/04/21</em></p>

<ul id="markdown-toc">
  <li><a href="#location" id="markdown-toc-location">Location</a></li>
  <li><a href="#naming-convention" id="markdown-toc-naming-convention">Naming convention</a></li>
  <li><a href="#loading-a-module" id="markdown-toc-loading-a-module">Loading a module</a></li>
  <li><a href="#developping-a-module" id="markdown-toc-developping-a-module">Developping a module</a>    <ul>
      <li><a href="#inheritance" id="markdown-toc-inheritance">Inheritance</a></li>
      <li><a href="#constructor" id="markdown-toc-constructor">Constructor</a></li>
      <li><a href="#mandatory-functions" id="markdown-toc-mandatory-functions">Mandatory functions</a></li>
    </ul>
  </li>
  <li><a href="#template" id="markdown-toc-template">Template</a></li>
</ul>

<h2 id="location">Location</h2>
<p>Modules for the analyzer are stored in the <code class="language-plaintext highlighter-rouge">modules/new_analyzer/</code> directory.</p>

<h2 id="naming-convention">Naming convention</h2>
<p>Currently every analyzer module is defined in a file with the name
<code class="language-plaintext highlighter-rouge">fault_analyzer_decorator_MODULE_NAME.py</code>. The reason is that they are all
decorators of the analyzer component defined in <code class="language-plaintext highlighter-rouge">fault_analyzer_component.py</code>.</p>

<p>The class name of the module is define as <code class="language-plaintext highlighter-rouge">FaultAnalyzerMODULENAME</code>.</p>

<h2 id="loading-a-module">Loading a module</h2>
<p>The modules are loaded in the <code class="language-plaintext highlighter-rouge">modules/new_analyzer/analyzer.py</code> file, in the
<code class="language-plaintext highlighter-rouge">init_fault_analyzer()</code> function.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># modules/new_analyzer/analyzer.py
</span>
<span class="k">def</span> <span class="nf">init_fault_analyzer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="n">fa</span> <span class="o">=</span> <span class="n">FaultAnalyzer</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">results</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="n">fa</span> <span class="o">=</span> <span class="n">FaultAnalyzerBase</span><span class="p">(</span><span class="n">fa</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">are_all</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">values_type</span><span class="p">,</span> <span class="nb">int</span><span class="p">):</span>
        <span class="n">fa</span> <span class="o">=</span> <span class="n">FaultAnalyzerFaultModel</span><span class="p">(</span><span class="n">fa</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="k">if</span> <span class="s">"carto"</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">kwargs</span><span class="p">[</span><span class="s">"carto"</span><span class="p">]:</span>
            <span class="n">fa</span> <span class="o">=</span> <span class="n">FaultAnalyzerCarto</span><span class="p">(</span><span class="n">fa</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
            <span class="n">fa</span> <span class="o">=</span> <span class="n">FaultAnalyzerFaultModelsCarto</span><span class="p">(</span><span class="n">fa</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span><span class="s">"delay_name"</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="p">):</span>
        <span class="n">fa</span> <span class="o">=</span> <span class="n">FaultAnalyzerDelay</span><span class="p">(</span><span class="n">fa</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">fa</span>
</code></pre></div></div>

<p>To load a module, it is only needed to import it:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">.fault_analyzer_MODULE_NAME</span> <span class="kn">import</span> <span class="n">FaultAnalyzerMODULENAME</span>
</code></pre></div></div>
<p>and to add the following line to the <code class="language-plaintext highlighter-rouge">init_fault_analyzer()</code> function:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fa</span> <span class="o">=</span> <span class="n">FaultAnalyzerMODULENAME</span><span class="p">(</span><span class="n">fa</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">**kwargs</code> is the <code class="language-plaintext highlighter-rouge">params</code> dictionary defined in the parameter file. It is
possible to make the loading of a module conditional by adding <code class="language-plaintext highlighter-rouge">if</code> statements.</p>

<h2 id="developping-a-module">Developping a module</h2>
<h3 id="inheritance">Inheritance</h3>
<p>A module inherit from the <code class="language-plaintext highlighter-rouge">FaultAnalyzerDecorator</code> class defined in the
<code class="language-plaintext highlighter-rouge">fault_analyzer_decorator</code> file.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">.fault_analyzer_decorator</span> <span class="kn">import</span> <span class="n">FaultAnalyzerDecorator</span>

<span class="k">class</span> <span class="nc">FaultAnalyzerMODULENAME</span><span class="p">(</span><span class="n">FaultAnalyzerDecorator</span><span class="p">):</span>
    <span class="c1"># My module
</span></code></pre></div></div>

<h3 id="constructor">Constructor</h3>
<p>The constructor of a module must have the following prototype:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">comp</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">comp</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">comp</code> is the component we want to decorate with the module.</li>
  <li><code class="language-plaintext highlighter-rouge">kwargs</code> is a dictionary of parameters.</li>
</ul>

<p>To extract the wanted parameters from the dictionary, it is recommended to use
the <code class="language-plaintext highlighter-rouge">init_arg()</code> function from the <code class="language-plaintext highlighter-rouge">modules/new_analyzer/arg_init.py</code> file:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">.arg_init</span> <span class="kn">import</span> <span class="n">init_arg</span>

<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">comp</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">comp</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    
    <span class="bp">self</span><span class="p">.</span><span class="n">my_param</span> <span class="o">=</span> <span class="n">init_arg</span><span class="p">(</span><span class="s">"my_param_name"</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span>
</code></pre></div></div>

<p>Then it is recommended to create the results structure. The results is a list of
dictionary, each dictionary represent a result computed by the module and has
three parameters:</p>
<ul>
  <li>a title which able to identify the result,</li>
  <li>a data set which stores the result values,</li>
  <li>a set of labels which able to identify the different data sets.
For instance:</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1"># Create result set
</span><span class="bp">self</span><span class="p">.</span><span class="n">my_result1_set</span> <span class="o">=</span> <span class="p">[]</span>
<span class="bp">self</span><span class="p">.</span><span class="n">my_result2_set</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1"># Create a result data
</span><span class="bp">self</span><span class="p">.</span><span class="n">my_result_data</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1"># Add the result data to the results object
</span><span class="bp">self</span><span class="p">.</span><span class="n">results</span> <span class="o">+=</span> <span class="p">[{</span>
    <span class="s">"title"</span><span class="p">:</span> <span class="s">"My title"</span><span class="p">,</span>
    <span class="s">"data"</span><span class="p">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">my_result_data</span><span class="p">,</span>
    <span class="s">"labels"</span><span class="p">:</span> <span class="p">[</span><span class="s">"My first label"</span><span class="p">,</span> <span class="s">"My second label"</span><span class="p">]</span>
<span class="p">}]</span>
</code></pre></div></div>

<h3 id="mandatory-functions">Mandatory functions</h3>
<p>There are two mandatory functions.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">analyze(self, ope)</code></p>

    <p>This function is called for every load module. The <code class="language-plaintext highlighter-rouge">ope</code>
parameter is a line from the manip file. It is possible to access to the
different fields of this line by calling <code class="language-plaintext highlighter-rouge">ope["field_name"]</code>.</p>

    <p class="danger">This function must always call the <code class="language-plaintext highlighter-rouge">super().analyze(ope)</code> function before doing
anything. Otherwise the decorator pattern will not work.</p>

    <p>For instance:</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">analyze</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ope</span><span class="p">):</span>
    <span class="nb">super</span><span class="p">().</span><span class="n">analyze</span><span class="p">(</span><span class="n">ope</span><span class="p">)</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">my_result1_set</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">ope</span><span class="p">[</span><span class="s">"param1"</span><span class="p">])</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">my_result2_set</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">ope</span><span class="p">[</span><span class="s">"param2"</span><span class="p">])</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">post_analysis(self)</code></p>

    <p>This function is called after the whole analysis process for every module. It
is used for setting the actual results once the analysis is done.</p>

    <p class="danger">This function must always call the <code class="language-plaintext highlighter-rouge">super().post_analysis()</code> function before
doing anything. Otherwise the decorator pattern will not work.</p>

    <p>For instance:</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">post_analysis</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="nb">super</span><span class="p">().</span><span class="n">post_analysis</span><span class="p">()</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">my_result_data</span> <span class="o">=</span> <span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">my_result1_set</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">my_result2_set</span><span class="p">]</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="template">Template</h2>
<p>A template is available in the
<code class="language-plaintext highlighter-rouge">modules/new_analyzer/fault_analyzer_decorator_template.py</code> file:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># modules/new_analyzer/fault_analyzer_decorator_template.py
</span>
<span class="kn">from</span> <span class="nn">.arg_init</span> <span class="kn">import</span> <span class="n">init_arg</span>

<span class="c1"># Import the FaultAnalyzerDecorator class for inheritance
</span><span class="kn">from</span> <span class="nn">.fault_analyzer_decorator</span> <span class="kn">import</span> <span class="n">FaultAnalyzerDecorator</span>

<span class="c1"># Create a child class of the FaultAnalyzerDecorator class
</span><span class="k">class</span> <span class="nc">FaultAnalyzerTEMPLATE</span><span class="p">(</span><span class="n">FaultAnalyzerDecorator</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">comp</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">comp</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

        <span class="c1"># Initialize the parameters you need
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">my_param</span> <span class="o">=</span> <span class="n">init_arg</span><span class="p">(</span><span class="s">"my_param_name"</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">)</span>

        <span class="c1"># Create a result data
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">my_result_data</span> <span class="o">=</span> <span class="p">[]</span>

        <span class="c1"># Add the result data to the results object
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">results</span> <span class="o">+=</span> <span class="p">[{</span>
            <span class="s">"title"</span><span class="p">:</span> <span class="s">"My title"</span><span class="p">,</span>
            <span class="s">"data"</span><span class="p">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">my_result_data</span><span class="p">,</span>
            <span class="s">"labels"</span><span class="p">:</span> <span class="p">[</span><span class="s">"My first label"</span><span class="p">,</span> <span class="s">"My second label"</span><span class="p">]</span>
        <span class="p">}]</span>

    <span class="c1"># Overwrite the analyze method
</span>    <span class="k">def</span> <span class="nf">analyze</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ope</span><span class="p">):</span>
        <span class="c1"># Call the parent class method
</span>        <span class="nb">super</span><span class="p">().</span><span class="n">analyze</span><span class="p">(</span><span class="n">ope</span><span class="p">)</span>
        <span class="c1"># Update your data
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">update_data</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">my_result_data</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">update_data</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">post_analysis</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">post_analysis</span><span class="p">()</span>
        <span class="c1"># You can modify the results here
</span></code></pre></div></div>
:ET
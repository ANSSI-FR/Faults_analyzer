I"þ4<h1 class="no_toc" id="fault-analyzer-documentation">Fault Analyzer documentation</h1>

<ul id="markdown-toc">
  <li><a href="#requirements" id="markdown-toc-requirements">Requirements</a>    <ul>
      <li><a href="#python-packages" id="markdown-toc-python-packages">Python packages</a></li>
    </ul>
  </li>
  <li><a href="#quick-start" id="markdown-toc-quick-start">Quick start</a>    <ul>
      <li><a href="#setting-up-the-configuration-file" id="markdown-toc-setting-up-the-configuration-file">Setting up the configuration file</a></li>
      <li><a href="#the-manips" id="markdown-toc-the-manips">The <code class="language-plaintext highlighter-rouge">manips</code></a>        <ul>
          <li><a href="#mandatory-fields" id="markdown-toc-mandatory-fields">Mandatory fields</a></li>
          <li><a href="#filename-format" id="markdown-toc-filename-format">Filename format</a></li>
          <li><a href="#minimal-example" id="markdown-toc-minimal-example">Minimal example</a></li>
        </ul>
      </li>
      <li><a href="#the-parameters" id="markdown-toc-the-parameters">The parameters</a>        <ul>
          <li><a href="#minimal-example-1" id="markdown-toc-minimal-example-1">Minimal example</a></li>
        </ul>
      </li>
      <li><a href="#starting-the-analyzer" id="markdown-toc-starting-the-analyzer">Starting the analyzer</a></li>
    </ul>
  </li>
</ul>

<p>The fault analyzer software aims at providing an interface for analyzing
perturbation experiments.</p>

<ul>
  <li><strong>Current maintaner:</strong> Thomas Trouchkine (<a href="mailto:thomas.trouchkine@ssi.gouv.fr">thomas.trouchkine@ssi.gouv.fr</a>)</li>
</ul>

<h2 id="requirements">Requirements</h2>
<ul>
  <li>python (tested with version 3.8.6)</li>
</ul>

<h3 id="python-packages">Python packages</h3>
<p>All the needed packages are listed in the <code class="language-plaintext highlighter-rouge">requirements.txt</code> file and are
automatically install in the <code class="language-plaintext highlighter-rouge">virtualenv</code> via the <code class="language-plaintext highlighter-rouge">make init</code> command.</p>
<ul>
  <li>pandas</li>
  <li>prettytable</li>
  <li>matplotlib</li>
  <li>plotter</li>
  <li>tikzplotlib</li>
  <li>termcolor</li>
  <li>PyGObject</li>
</ul>

<h1 id="quick-start">Quick start</h1>
<h2 id="setting-up-the-configuration-file">Setting up the configuration file</h2>
<p>The <code class="language-plaintext highlighter-rouge">config.py</code> stores the pathes where the experiments, their parameters and
their results are stored.</p>

<p>By default the <code class="language-plaintext highlighter-rouge">config.py</code> file looks like this:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config.py
</span>
<span class="n">CONFIG</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"main_dir"</span><span class="p">:</span> <span class="s">"./tests/"</span><span class="p">,</span>
    <span class="s">"results_dir"</span><span class="p">:</span> <span class="s">"results/"</span><span class="p">,</span>
    <span class="s">"manips_dir"</span><span class="p">:</span> <span class="s">"manips/"</span><span class="p">,</span>
    <span class="s">"parameters_dir"</span><span class="p">:</span> <span class="s">"parameters/"</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">main_dir</code> is the directory containing the other directories. You may want to
change it to match your system.</li>
  <li><code class="language-plaintext highlighter-rouge">results_dir</code> is the directory where the results of the analysis are stored.</li>
  <li><code class="language-plaintext highlighter-rouge">manips_dir</code> is the directory where the manips, <em>i.e.</em> the non analyzed results coming from the experiments are stored.</li>
  <li><code class="language-plaintext highlighter-rouge">parameters_dir</code> is the directory where the specific to manips parameters
(such as initial values for instance) are stored.</li>
</ul>

<h2 id="the-manips">The <code class="language-plaintext highlighter-rouge">manips</code></h2>
<p>The <code class="language-plaintext highlighter-rouge">manips</code> files are <code class="language-plaintext highlighter-rouge">.csv</code> files storing the results of each experiments, but
not analyzed.</p>

<h3 id="mandatory-fields">Mandatory fields</h3>
<p>The minimal parameters to have in a <code class="language-plaintext highlighter-rouge">manips</code> file are <code class="language-plaintext highlighter-rouge">log</code> and <code class="language-plaintext highlighter-rouge">reboot</code>.</p>

<h3 id="filename-format">Filename format</h3>
<p>The name format of a <code class="language-plaintext highlighter-rouge">manips</code> file must mathc the following:
<code class="language-plaintext highlighter-rouge">{component}_{target}_{iv}_{anything}.csv</code> where:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">{component}</code> is the name of the component.</li>
  <li><code class="language-plaintext highlighter-rouge">{target}</code> is the tageted implementation running on the component.</li>
  <li><code class="language-plaintext highlighter-rouge">{iv}</code> is a code that helps in identifying the used initial values.</li>
  <li><code class="language-plaintext highlighter-rouge">{anything}</code> can be anything you want.</li>
</ul>

<p class="info">This nomenclature is a proposed way to manage your experiments. In practice it
is only needed to have, at least, three underscores <code class="language-plaintext highlighter-rouge">_</code> in the file name as the
analyzer will parse the name of the manip based on them and load the matching
parameters. For instance <code class="language-plaintext highlighter-rouge">bcm2837_aes_iv1_carto.csv</code> matches the
<code class="language-plaintext highlighter-rouge">bcm2837_aes_iv1.py</code> parameters file.</p>

<h3 id="minimal-example">Minimal example</h3>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># test_base_0.csv</span>

,log,reboot
0,FlagBegin<span class="p">;</span><span class="nt">-131071</span><span class="p">;</span>FlagEnd,False
1,FlagBegin<span class="p">;</span><span class="nt">-131070</span><span class="p">;</span>FlagEnd,False
</code></pre></div></div>

<h2 id="the-parameters">The parameters</h2>
<p>The parameters file are <code class="language-plaintext highlighter-rouge">.py</code> files the parameters needed for the analysis in a
<code class="language-plaintext highlighter-rouge">params</code> variable. This <code class="language-plaintext highlighter-rouge">params</code> variable is a dictionnary containing the
parameters for analyzing the experiments.</p>

<p>The mandatory parameters are:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">obs_names</code>: a list containing the names of the observed. The order given in
this list must match the order of the <code class="language-plaintext highlighter-rouge">log</code> field in the <code class="language-plaintext highlighter-rouge">manip</code> file.</li>
  <li><code class="language-plaintext highlighter-rouge">default_values</code>: a list containing the expected values of the observed.</li>
  <li><code class="language-plaintext highlighter-rouge">to_test</code>: a list containing booleans. If the boolean at index <code class="language-plaintext highlighter-rouge">i</code> is set to
<code class="language-plaintext highlighter-rouge">True</code> then the observed at the same index will be taken into account during
the analysis, otherwise it will be ignored.</li>
  <li><code class="language-plaintext highlighter-rouge">reboot_name</code>: the name of the field in the <code class="language-plaintext highlighter-rouge">manip</code> file storing the
information if there was a reboot or not during the experiment.</li>
  <li><code class="language-plaintext highlighter-rouge">log_name</code>: the name of the field in the <code class="language-plaintext highlighter-rouge">manip</code> file storing the log of the
experiment.</li>
  <li><code class="language-plaintext highlighter-rouge">log_separator</code>: the sequence used for separing the different fields of the
log.</li>
  <li><code class="language-plaintext highlighter-rouge">nb_bits</code>: the number of bits the observed values are on.</li>
  <li><code class="language-plaintext highlighter-rouge">log_flag_begin</code>: the sequence at the index <code class="language-plaintext highlighter-rouge">0</code> in the log.</li>
  <li><code class="language-plaintext highlighter-rouge">log_flag_end</code>: the sequence at the last index in the log.</li>
</ul>

<h3 id="minimal-example-1">Minimal example</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_base_0.py
</span>
<span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"log_flag_begin"</span><span class="p">:</span> <span class="s">"FlagBegin"</span><span class="p">,</span>
    <span class="s">"log_flag_end"</span><span class="p">:</span> <span class="s">"FlagEnd"</span><span class="p">,</span>
    <span class="s">"obs_names"</span><span class="p">:</span> <span class="p">[</span><span class="s">"My register"</span><span class="p">],</span>
    <span class="s">"default_values"</span><span class="p">:</span> <span class="p">[</span><span class="mh">0xfffe0001</span><span class="p">],</span>
    <span class="s">"to_test"</span><span class="p">:</span> <span class="p">[</span><span class="bp">True</span><span class="p">],</span>
    <span class="s">"reboot_name"</span><span class="p">:</span> <span class="s">"reboot"</span><span class="p">,</span>
    <span class="s">"log_name"</span><span class="p">:</span> <span class="s">"log"</span><span class="p">,</span>
    <span class="s">"log_separator"</span><span class="p">:</span> <span class="s">";"</span><span class="p">,</span>
    <span class="s">"nb_bits"</span><span class="p">:</span> <span class="mi">32</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="starting-the-analyzer">Starting the analyzer</h2>
<p>The analyzer can be started by simply running the following command:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make run
</code></pre></div></div>

<p>and the following interface should appear:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Welcome! Type ? to list commands
fa&gt; 
</code></pre></div></div>

<p>From this point, you can use <a href="/Fault_analyzer/cmds/">the available commands</a> to
manipulate your experiments.</p>

<p>For instance, you can display the available manips using the <code class="language-plaintext highlighter-rouge">print</code> command:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fa&gt; print

 Manips
<span class="o">========</span>
<span class="o">[</span>0]  test_base_0
</code></pre></div></div>

<p>Then you can analyze a manip using the <code class="language-plaintext highlighter-rouge">analyze</code> command and the index of the
manip you want to analyze:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fa&gt; analyze 0
Analyzing test_base_0
Loading Analyzer
Analysis progress: |â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â â | 100.0% Complete
</code></pre></div></div>

<p>When the analysis is over you can see an asteriks next to the analyzed manip
when using the <code class="language-plaintext highlighter-rouge">print</code> command.</p>

<p>You can display the available results of the analysis of a manip using the
<code class="language-plaintext highlighter-rouge">print</code> command and the index of the manip you want to see the results:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fa&gt; print 0

 test_base_0 available results
<span class="o">===============================</span>
<span class="o">[</span>0] Faults general information
<span class="o">[</span>1] Observed statistics
<span class="o">[</span>2] Faulted values statistics
<span class="o">[</span>3] Fault model statistics
<span class="o">[</span>4] Unknown fault model values
</code></pre></div></div>

<p>Finally, you can display the results using the <code class="language-plaintext highlighter-rouge">print</code> command and both the
index of the manip and the index of the result you want to see:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fa&gt; print 0 0

 test_base_0 results
<span class="o">=====================</span>
Faults general information
+----------------------------------------------+---------+
|                 Information                  |  Values |
+----------------------------------------------+---------+
|               Number of faults               |    1    |
|            Fault probability <span class="o">(</span>%<span class="o">)</span>             | 50.0000 |
| Average number of faulted observed per fault |  1.0000 |
+----------------------------------------------+---------+
</code></pre></div></div>
:ET